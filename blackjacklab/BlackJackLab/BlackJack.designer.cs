#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlackJackLab
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="C:\\USERS\\JOAKIM\\DOCUMENTS\\VISUAL STUDIO 2013\\PROJECTS\\BLACKJACKLAB\\BLACKJACKLAB\\B" +
		"LACKJACK.MDF")]
	public partial class BlackJackDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCardInHand(CardInHand instance);
    partial void UpdateCardInHand(CardInHand instance);
    partial void DeleteCardInHand(CardInHand instance);
    partial void InsertCard(Card instance);
    partial void UpdateCard(Card instance);
    partial void DeleteCard(Card instance);
    partial void InsertCardsInDeck(CardsInDeck instance);
    partial void UpdateCardsInDeck(CardsInDeck instance);
    partial void DeleteCardsInDeck(CardsInDeck instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertdealerCard(dealerCard instance);
    partial void UpdatedealerCard(dealerCard instance);
    partial void DeletedealerCard(dealerCard instance);
    #endregion
		
		public BlackJackDataContext() : 
				base(global::BlackJackLab.Properties.Settings.Default.C__USERS_JOAKIM_DOCUMENTS_VISUAL_STUDIO_2013_PROJECTS_BLACKJACKLAB_BLACKJACKLAB_BLACKJACK_MDFConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BlackJackDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlackJackDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlackJackDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlackJackDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CardInHand> CardInHands
		{
			get
			{
				return this.GetTable<CardInHand>();
			}
		}
		
		public System.Data.Linq.Table<Card> Cards
		{
			get
			{
				return this.GetTable<Card>();
			}
		}
		
		public System.Data.Linq.Table<CardsInDeck> CardsInDecks
		{
			get
			{
				return this.GetTable<CardsInDeck>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<dealerCard> dealerCards
		{
			get
			{
				return this.GetTable<dealerCard>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CardInHand")]
	public partial class CardInHand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cardValue;
		
		private string _color;
		
		private string _face;
		
		private int _belongsTo;
		
		private EntityRef<Card> _Card;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncardValueChanging(int value);
    partial void OncardValueChanged();
    partial void OncolorChanging(string value);
    partial void OncolorChanged();
    partial void OnfaceChanging(string value);
    partial void OnfaceChanged();
    partial void OnbelongsToChanging(int value);
    partial void OnbelongsToChanged();
    #endregion
		
		public CardInHand()
		{
			this._Card = default(EntityRef<Card>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardValue", DbType="Int", IsPrimaryKey=true)]
		public int cardValue
		{
			get
			{
				return this._cardValue;
			}
			set
			{
				if ((this._cardValue != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncardValueChanging(value);
					this.SendPropertyChanging();
					this._cardValue = value;
					this.SendPropertyChanged("cardValue");
					this.OncardValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_color", DbType="VarChar(8)", CanBeNull=false, IsPrimaryKey=true)]
		public string color
		{
			get
			{
				return this._color;
			}
			set
			{
				if ((this._color != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncolorChanging(value);
					this.SendPropertyChanging();
					this._color = value;
					this.SendPropertyChanged("color");
					this.OncolorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_face", DbType="VarChar(5)", CanBeNull=false, IsPrimaryKey=true)]
		public string face
		{
			get
			{
				return this._face;
			}
			set
			{
				if ((this._face != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfaceChanging(value);
					this.SendPropertyChanging();
					this._face = value;
					this.SendPropertyChanged("face");
					this.OnfaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_belongsTo", DbType="Int", IsPrimaryKey=true)]
		public int belongsTo
		{
			get
			{
				return this._belongsTo;
			}
			set
			{
				if ((this._belongsTo != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbelongsToChanging(value);
					this.SendPropertyChanging();
					this._belongsTo = value;
					this.SendPropertyChanged("belongsTo");
					this.OnbelongsToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_CardInHand", Storage="_Card", ThisKey="cardValue,color,face", OtherKey="cardValue,color,face", IsForeignKey=true)]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.CardInHands.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.CardInHands.Add(this);
						this._cardValue = value.cardValue;
						this._color = value.color;
						this._face = value.face;
					}
					else
					{
						this._cardValue = default(int);
						this._color = default(string);
						this._face = default(string);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_CardInHand", Storage="_Player", ThisKey="belongsTo", OtherKey="playerPos", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.CardInHands.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.CardInHands.Add(this);
						this._belongsTo = value.playerPos;
					}
					else
					{
						this._belongsTo = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cards")]
	public partial class Card : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cardValue;
		
		private string _color;
		
		private string _face;
		
		private string _imagepath;
		
		private System.Nullable<bool> _visible;
		
		private EntitySet<CardInHand> _CardInHands;
		
		private EntitySet<CardsInDeck> _CardsInDecks;
		
		private EntitySet<dealerCard> _dealerCard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncardValueChanging(int value);
    partial void OncardValueChanged();
    partial void OncolorChanging(string value);
    partial void OncolorChanged();
    partial void OnfaceChanging(string value);
    partial void OnfaceChanged();
    partial void OnimagepathChanging(string value);
    partial void OnimagepathChanged();
    partial void OnvisibleChanging(System.Nullable<bool> value);
    partial void OnvisibleChanged();
    #endregion
		
		public Card()
		{
			this._CardInHands = new EntitySet<CardInHand>(new Action<CardInHand>(this.attach_CardInHands), new Action<CardInHand>(this.detach_CardInHands));
			this._CardsInDecks = new EntitySet<CardsInDeck>(new Action<CardsInDeck>(this.attach_CardsInDecks), new Action<CardsInDeck>(this.detach_CardsInDecks));
			this._dealerCard = new EntitySet<dealerCard>(new Action<dealerCard>(this.attach_dealerCard), new Action<dealerCard>(this.detach_dealerCard));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardValue", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int cardValue
		{
			get
			{
				return this._cardValue;
			}
			set
			{
				if ((this._cardValue != value))
				{
					this.OncardValueChanging(value);
					this.SendPropertyChanging();
					this._cardValue = value;
					this.SendPropertyChanged("cardValue");
					this.OncardValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_color", DbType="VarChar(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string color
		{
			get
			{
				return this._color;
			}
			set
			{
				if ((this._color != value))
				{
					this.OncolorChanging(value);
					this.SendPropertyChanging();
					this._color = value;
					this.SendPropertyChanged("color");
					this.OncolorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_face", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string face
		{
			get
			{
				return this._face;
			}
			set
			{
				if ((this._face != value))
				{
					this.OnfaceChanging(value);
					this.SendPropertyChanging();
					this._face = value;
					this.SendPropertyChanged("face");
					this.OnfaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imagepath", DbType="VarChar(255)")]
		public string imagepath
		{
			get
			{
				return this._imagepath;
			}
			set
			{
				if ((this._imagepath != value))
				{
					this.OnimagepathChanging(value);
					this.SendPropertyChanging();
					this._imagepath = value;
					this.SendPropertyChanged("imagepath");
					this.OnimagepathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visible", DbType="Bit")]
		public System.Nullable<bool> visible
		{
			get
			{
				return this._visible;
			}
			set
			{
				if ((this._visible != value))
				{
					this.OnvisibleChanging(value);
					this.SendPropertyChanging();
					this._visible = value;
					this.SendPropertyChanged("visible");
					this.OnvisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_CardInHand", Storage="_CardInHands", ThisKey="cardValue,color,face", OtherKey="cardValue,color,face")]
		public EntitySet<CardInHand> CardInHands
		{
			get
			{
				return this._CardInHands;
			}
			set
			{
				this._CardInHands.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_CardsInDeck", Storage="_CardsInDecks", ThisKey="cardValue,color,face", OtherKey="cardValue,color,face")]
		public EntitySet<CardsInDeck> CardsInDecks
		{
			get
			{
				return this._CardsInDecks;
			}
			set
			{
				this._CardsInDecks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_dealerCard", Storage="_dealerCard", ThisKey="cardValue,color,face", OtherKey="cardValue,color,face")]
		public EntitySet<dealerCard> dealerCard
		{
			get
			{
				return this._dealerCard;
			}
			set
			{
				this._dealerCard.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CardInHands(CardInHand entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_CardInHands(CardInHand entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
		
		private void attach_CardsInDecks(CardsInDeck entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_CardsInDecks(CardsInDeck entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
		
		private void attach_dealerCard(dealerCard entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_dealerCard(dealerCard entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CardsInDeck")]
	public partial class CardsInDeck : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _cardValue;
		
		private string _color;
		
		private string _face;
		
		private int _position;
		
		private EntityRef<Card> _Card;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncardValueChanging(System.Nullable<int> value);
    partial void OncardValueChanged();
    partial void OncolorChanging(string value);
    partial void OncolorChanged();
    partial void OnfaceChanging(string value);
    partial void OnfaceChanged();
    partial void OnpositionChanging(int value);
    partial void OnpositionChanged();
    #endregion
		
		public CardsInDeck()
		{
			this._Card = default(EntityRef<Card>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardValue", DbType="Int")]
		public System.Nullable<int> cardValue
		{
			get
			{
				return this._cardValue;
			}
			set
			{
				if ((this._cardValue != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncardValueChanging(value);
					this.SendPropertyChanging();
					this._cardValue = value;
					this.SendPropertyChanged("cardValue");
					this.OncardValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_color", DbType="VarChar(8)")]
		public string color
		{
			get
			{
				return this._color;
			}
			set
			{
				if ((this._color != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncolorChanging(value);
					this.SendPropertyChanging();
					this._color = value;
					this.SendPropertyChanged("color");
					this.OncolorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_face", DbType="VarChar(5)")]
		public string face
		{
			get
			{
				return this._face;
			}
			set
			{
				if ((this._face != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfaceChanging(value);
					this.SendPropertyChanging();
					this._face = value;
					this.SendPropertyChanged("face");
					this.OnfaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_CardsInDeck", Storage="_Card", ThisKey="cardValue,color,face", OtherKey="cardValue,color,face", IsForeignKey=true)]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.CardsInDecks.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.CardsInDecks.Add(this);
						this._cardValue = value.cardValue;
						this._color = value.color;
						this._face = value.face;
					}
					else
					{
						this._cardValue = default(Nullable<int>);
						this._color = default(string);
						this._face = default(string);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _playerPos;
		
		private System.Nullable<int> _cash;
		
		private System.Nullable<bool> _active;
		
		private string _winStatus;
		
		private System.Nullable<int> _bet;
		
		private EntitySet<CardInHand> _CardInHands;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnplayerPosChanging(int value);
    partial void OnplayerPosChanged();
    partial void OncashChanging(System.Nullable<int> value);
    partial void OncashChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    partial void OnwinStatusChanging(string value);
    partial void OnwinStatusChanged();
    partial void OnbetChanging(System.Nullable<int> value);
    partial void OnbetChanged();
    #endregion
		
		public Player()
		{
			this._CardInHands = new EntitySet<CardInHand>(new Action<CardInHand>(this.attach_CardInHands), new Action<CardInHand>(this.detach_CardInHands));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerPos", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int playerPos
		{
			get
			{
				return this._playerPos;
			}
			set
			{
				if ((this._playerPos != value))
				{
					this.OnplayerPosChanging(value);
					this.SendPropertyChanging();
					this._playerPos = value;
					this.SendPropertyChanged("playerPos");
					this.OnplayerPosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cash", DbType="Int")]
		public System.Nullable<int> cash
		{
			get
			{
				return this._cash;
			}
			set
			{
				if ((this._cash != value))
				{
					this.OncashChanging(value);
					this.SendPropertyChanging();
					this._cash = value;
					this.SendPropertyChanged("cash");
					this.OncashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_winStatus", DbType="VarChar(20)")]
		public string winStatus
		{
			get
			{
				return this._winStatus;
			}
			set
			{
				if ((this._winStatus != value))
				{
					this.OnwinStatusChanging(value);
					this.SendPropertyChanging();
					this._winStatus = value;
					this.SendPropertyChanged("winStatus");
					this.OnwinStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bet", DbType="Int")]
		public System.Nullable<int> bet
		{
			get
			{
				return this._bet;
			}
			set
			{
				if ((this._bet != value))
				{
					this.OnbetChanging(value);
					this.SendPropertyChanging();
					this._bet = value;
					this.SendPropertyChanged("bet");
					this.OnbetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_CardInHand", Storage="_CardInHands", ThisKey="playerPos", OtherKey="belongsTo")]
		public EntitySet<CardInHand> CardInHands
		{
			get
			{
				return this._CardInHands;
			}
			set
			{
				this._CardInHands.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CardInHands(CardInHand entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_CardInHands(CardInHand entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dealerCards")]
	public partial class dealerCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cardValue;
		
		private string _color;
		
		private string _face;
		
		private EntityRef<Card> _Card;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncardValueChanging(int value);
    partial void OncardValueChanged();
    partial void OncolorChanging(string value);
    partial void OncolorChanged();
    partial void OnfaceChanging(string value);
    partial void OnfaceChanged();
    #endregion
		
		public dealerCard()
		{
			this._Card = default(EntityRef<Card>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardValue", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int cardValue
		{
			get
			{
				return this._cardValue;
			}
			set
			{
				if ((this._cardValue != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncardValueChanging(value);
					this.SendPropertyChanging();
					this._cardValue = value;
					this.SendPropertyChanged("cardValue");
					this.OncardValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_color", DbType="VarChar(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string color
		{
			get
			{
				return this._color;
			}
			set
			{
				if ((this._color != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncolorChanging(value);
					this.SendPropertyChanging();
					this._color = value;
					this.SendPropertyChanged("color");
					this.OncolorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_face", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string face
		{
			get
			{
				return this._face;
			}
			set
			{
				if ((this._face != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfaceChanging(value);
					this.SendPropertyChanging();
					this._face = value;
					this.SendPropertyChanged("face");
					this.OnfaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_dealerCard", Storage="_Card", ThisKey="cardValue,color,face", OtherKey="cardValue,color,face", IsForeignKey=true)]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.dealerCard.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.dealerCard.Add(this);
						this._cardValue = value.cardValue;
						this._color = value.color;
						this._face = value.face;
					}
					else
					{
						this._cardValue = default(int);
						this._color = default(string);
						this._face = default(string);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
